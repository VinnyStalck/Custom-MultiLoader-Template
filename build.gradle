plugins {
    id 'fabric-loom' version '1.3-SNAPSHOT' apply(false)
    id 'net.minecraftforge.gradle' version '[6.0,6.2)' apply(false)
    id "org.spongepowered.mixin" version "${mixin_version}" apply(false)
    id "me.modmuss50.mod-publish-plugin" version "0.2.1"
}

ext.isSnapshot = providers.environmentVariable("SNAPSHOT").map { it == "true" }.getOrElse(false)

allprojects {
    version = "${mod_version}+mc${minecraft_version}${isSnapshot ? '-SNAPSHOT' : ''}"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    base {
        archivesName = "${mod_name}-${project.name}"
    }

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
        manifest {
            attributes([
                    'Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_author,
                    'Specification-Version'   : project.jar.archiveVersion,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : mod_author,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Timestamp'               : System.currentTimeMillis(),
                    'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Built-On-Minecraft'      : minecraft_version
            ])
        }
    }

    sourcesJar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
    }

    repositories {
        mavenCentral()
    }

    tasks.withType(JavaCompile).configureEach {

        it.options.encoding = 'UTF-8'
        it.options.getRelease().set(17)
    }

    processResources {
        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'mods.toml', '*.mixins.json']) {
            expand project.properties
        }
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata).configureEach {

        enabled = false
    }

    publishing {
        repositories {
            if (providers.environmentVariable("MAVEN_TOKEN").orNull) {
                maven {
                    url "${nanite_maven_url}${isSnapshot ? 'snapshots' : 'releases'}"
                    credentials {
                        username = "admin"
                        password = providers.environmentVariable("MAVEN_TOKEN").get()
                    }
                }
            }
        }
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSE_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    type = STABLE

    def makeOptions = { String name, boolean isCurse ->
        def options = (isCurse ? curseforgeOptions {} : modrinthOptions {}).get()
        options.minecraftVersions.add("${minecraft_version}")
        options.projectId = isCurse ? "${curseforge_id}" : "${modrinth_id}"
        options.accessToken = providers.environmentVariable(isCurse ? "CURSE_TOKEN" : "MODRINTH_TOKEN")
        options.displayName = "${project.name} ${name[0].toUpperCase() + name.substring(1)} ${mod_version}+mc${minecraft_version}"
        options.file = project.provider { project(":${name}").tasks.remapJar }.flatMap { it.archiveFile }
        options.modLoaders.add("Java 17")
        options.modLoaders.add("${name}")
        return options
    }

    curseforge("curseforgeForge") {
        from makeOptions("forge", true)
    }

    curseforge("curseforgeFabric") {
        from makeOptions("fabric", true)

        requires {
            slug = "fabric-api"
        }
    }

//    modrinth("modrinthForge") {
//        featured = true
//        from makeOptions("forge", false)
//    }
//
//    modrinth("modrinthFabric") {
//        featured = true
//        from makeOptions("fabric", false)
//
//        requires {
//            projectId = "P7dR8mSH" // Fabric api
//        }
//    }

    github {
        file = project.provider { project(":forge").tasks.remapJar }.flatMap { it.archiveFile }
        additionalFiles.from project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }
        repository = "${github_repo}"
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        commitish = providers.environmentVariable("GITHUB_SHA").orElse("dryRun")
    }
}